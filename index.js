module.exports = {
    env: {
        es6: true,
        browser: true,
        node: true,
    },
    globals: {
        global: false,
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    plugins: ['@typescript-eslint', 'no-mixed-operators', 'simple-import-sort'],
    extends: ['eslint:recommended'],
    rules: {
        // Possible Errors
        'comma-dangle': ['error', 'always-multiline'],
        'no-cond-assign': ['error', 'except-parens'],
        'no-console': ['error', { allow: ['warn', 'error'] }],

        // Best Practices
        'accessor-pairs': 'error',
        'array-callback-return': 'error',
        'block-scoped-var': 'error',
        'consistent-return': 'error',
        curly: ['error', 'multi-line'],
        'dot-location': ['error', 'property'],
        'dot-notation': 'error',
        eqeqeq: 'error',
        'no-alert': 'error',
        'no-caller': 'error',
        'no-div-regex': 'error',
        'no-else-return': 'error',
        'no-empty-function': 'error',
        'no-eq-null': 'error',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'error',
        'no-extra-label': 'error',
        'no-floating-decimal': 'error',
        'no-implicit-coercion': ['error', { boolean: false, number: true, string: true, allow: [] }],
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-iterator': 'error',
        'no-labels': 'error',
        'no-lone-blocks': 'error',
        'no-loop-func': 'error',
        'no-multi-spaces': ['error', { exceptions: { VariableDeclarator: true, ImportDeclaration: true, Property: true } }],
        'no-multi-str': 'error',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-octal-escape': 'error',
        'no-proto': 'error',
        'no-return-assign': 'error',
        'no-script-url': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-throw-literal': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unused-expressions': ['error', { 'allowShortCircuit': true, 'allowTernary': true }],
        'no-useless-call': 'error',
        'no-useless-concat': 'error',
        'no-void': 'error',
        'wrap-iife': ['error', 'inside'],
        yoda: 'error',

        // Variables
        'no-catch-shadow': 'error',
        'no-label-var': 'error',
        'no-restricted-globals': 'error',
        'no-undef-init': 'error',
        'no-use-before-define': ['error', 'nofunc'],

        // Stylistic Issues
        'simple-import-sort/imports': 'error',
        'simple-import-sort/exports': 'error',
        'array-bracket-spacing': ['error', 'never'],
        'block-spacing': ['error', 'always'],
        'brace-style': ['error', 'allman'],
        camelcase: ['error', { properties: 'always' }],
        'comma-spacing': ['error', { before: false, after: true }],
        'comma-style': ['error', 'last'],
        'computed-property-spacing': ['error', 'never'],
        'eol-last': ['error', 'unix'],
        'func-names': ['error', 'always'],
        'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
        indent: ['error', 4, { SwitchCase: 1, VariableDeclarator: { var: 1, let: 1, const: 1 } }],
        'jsx-quotes': ['error', 'prefer-double'],
        'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'minimum' }],
        'keyword-spacing': ['error', { before: true, after: true }],
        'linebreak-style': ['error', 'unix'],
        'max-depth': ['error', 6],
        'max-len': ['error', { code: 125, tabWidth: 4, comments: 200 }],
        'max-nested-callbacks': ['error', { max: 5 }],
        'max-params': ['error', { max: 10 }],
        'max-statements-per-line': ['error', { max: 2 }],
        'new-cap': ['error', { newIsCap: true, capIsNew: false, properties: false }],
        'new-parens': 'error',
        'padding-line-between-statements': [
            'error',
            { blankLine: 'always', prev: '*', next: 'return' },
            { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*'},
            { blankLine: 'any',    prev: ['const', 'let', 'var'], next: ['const', 'let', 'var']}
        ],
        'newline-per-chained-call': ['error', { ignoreChainWithDepth: 4 }],
        'no-array-constructor': 'error',
        'no-lonely-if': 'error',
        'no-mixed-operators': 'off',
        'no-mixed-operators/no-mixed-operators': 'error',
        'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1, maxBOF: 0 }],
        'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
        'no-nested-ternary': 'error',
        'no-new-object': 'error',
        'no-restricted-syntax': ['error', 'DebuggerStatement', 'EmptyStatement', 'LabeledStatement', 'WithStatement'],
        'func-call-spacing': ['error', 'never'],
        'no-trailing-spaces': 'error',
        'no-unneeded-ternary': 'error',
        'no-whitespace-before-property': 'error',
        'object-curly-spacing': ['error', 'always'],
        'one-var': ['error', 'never'],
        'one-var-declaration-per-line': ['error', 'always'],
        'operator-linebreak': ['error', 'before'],
        'padded-blocks': ['error', 'never'],
        'quote-props': ['error', 'as-needed'],
        quotes: ['error', 'single', { allowTemplateLiterals: true }],
        semi: ['error', 'always'],
        'semi-spacing': ['error', { before: false, after: true }],
        'space-before-blocks': ['error', 'always'],
        'space-before-function-paren': ['error', { anonymous: 'always', named: 'never' }],
        'space-in-parens': ['error', 'never'],
        'space-infix-ops': 'error',
        'space-unary-ops': ['error', { words: true, nonwords: false }],
        'spaced-comment': ['error', 'always'],
        'unicode-bom': ['error', 'never'],
        'wrap-regex': 'error',

        // ECMAScript 6
        'arrow-body-style': ['error', 'as-needed'],
        'arrow-parens': 'error',
        'arrow-spacing': ['error', { before: true, after: true }],
        'generator-star-spacing': ['error', { before: true, after: false }],
        'no-confusing-arrow': ['error', { allowParens: true }],
        'no-duplicate-imports': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-rename': 'error',
        'no-var': 'error',
        'object-shorthand': 'error',
        'prefer-const': 'error',
        'prefer-template': 'error',
        'rest-spread-spacing': ['error', 'never'],
        'template-curly-spacing': ['error', 'never'],
        'yield-star-spacing': ['error', 'before'],
    },
    overrides: [
        {
            files: ['*.test.ts'],
            plugins: ['jest'],
            rules: {
                'no-unused-expressions': 'off',
                'jest/no-disabled-tests': 'error',
                'jest/no-focused-tests': 'error',
                'jest/no-identical-title': 'error',
                'jest/prefer-to-have-length': 'error',
                'jest/valid-expect': 'error',
            },
        },
        {
            files: ['*.ts'],
            extends: ['plugin:@typescript-eslint/recommended', 'plugin:@typescript-eslint/eslint-recommended'],
            plugins: ['eslint-plugin-tsdoc'],
            rules: {
                // typescript: some styles need to be defined twice as the typescript versions will fix certain issues
                'tsdoc/syntax': 'error',
                '@typescript-eslint/no-explicit-any': 'off',
                '@typescript-eslint/ban-ts-ignore': 'off',
                '@typescript-eslint/no-unused-expressions': ['error', { 'allowShortCircuit': true, 'allowTernary': true }],
                'no-unused-expressions': 'off',
                '@typescript-eslint/no-use-before-define': ['error', 'nofunc'],
                'no-use-before-define': 'off',
                '@typescript-eslint/semi': 'error',
                'semi': 'off',
                'dot-notation': 'off',
                '@typescript-eslint/no-unused-vars': 'error',
                'no-unused-vars': 'off',
                '@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
                'comma-dangle': 'off',
                '@typescript-eslint/space-before-function-paren': ['error', { 'anonymous': 'always', 'named': 'never' }],
                'space-before-function-paren': 'off',
                '@typescript-eslint/quotes': ['error', 'single', { 'allowTemplateLiterals': true }],
                'quotes': 'off',
                '@typescript-eslint/brace-style': ['error', 'allman', { 'allowSingleLine': true }],
                'brace-style': 'off',
                '@typescript-eslint/comma-spacing': ['error', { 'before': false, 'after': true }],
                'comma-spacing': 'off',
                '@typescript-eslint/indent': ['error', 4, { 'SwitchCase': 1, 'VariableDeclarator': { 'var': 1, 'let': 1, 'const': 1 } }],
                'indent': 'off',
                '@typescript-eslint/ban-ts-comment': 'off',
                '@typescript-eslint/explicit-module-boundary-types': 'off',
                '@typescript-eslint/adjacent-overload-signatures': 'error',
                '@typescript-eslint/ban-types': 'off',
                '@typescript-eslint/no-array-constructor': 'error',
                'no-array-constructor': 'off',
                '@typescript-eslint/no-empty-function': 'error',
                'no-empty-function': 'off',
                '@typescript-eslint/no-empty-interface': 'error',
                '@typescript-eslint/no-extra-non-null-assertion': 'error',
                '@typescript-eslint/no-extra-semi': 'error',
                'no-extra-semi': 'off',
                '@typescript-eslint/no-inferrable-types': 'error',
                '@typescript-eslint/no-misused-new': 'error',
                '@typescript-eslint/no-namespace': 'error',
                '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
                '@typescript-eslint/no-non-null-assertion': 'error',
                '@typescript-eslint/no-this-alias': 'error',
                '@typescript-eslint/no-var-requires': 'error',
                '@typescript-eslint/prefer-as-const': 'error',
                '@typescript-eslint/prefer-namespace-keyword': 'error',
                '@typescript-eslint/triple-slash-reference': 'error',
                '@typescript-eslint/array-type': ['error', {'default':'array'}],
                '@typescript-eslint/type-annotation-spacing': 'error',
                '@typescript-eslint/consistent-type-imports': 'error',
                "@typescript-eslint/no-duplicate-imports": ["error"],
                "no-duplicate-imports": "off",
                '@typescript-eslint/space-infix-ops': ['error', { 'int32Hint': false }],
                'space-infix-ops': 'off',

                // project aware
                '@typescript-eslint/method-signature-style': 'error',
                '@typescript-eslint/member-delimiter-style': 'error',
                '@typescript-eslint/explicit-member-accessibility': ['error', { 'overrides': { 'constructors': 'no-public', 'accessors' : 'off' } }],
                '@typescript-eslint/prefer-nullish-coalescing': 'error',
                '@typescript-eslint/prefer-optional-chain': 'error',
                '@typescript-eslint/prefer-readonly': 'error',
                '@typescript-eslint/await-thenable': 'error',
                '@typescript-eslint/no-for-in-array': 'error',
                '@typescript-eslint/no-implied-eval': 'error',
                '@typescript-eslint/no-unnecessary-type-assertion': 'error',
                '@typescript-eslint/no-unsafe-return': 'error',
                '@typescript-eslint/prefer-regexp-exec': 'error',
                "@typescript-eslint/no-misused-promises": [
                    "error",
                    {
                      "checksConditionals": false,
                      "checksVoidReturn": false
                    }
                ],
                'require-await': 'off',
                '@typescript-eslint/require-await': 'off',
            },
        },
    ],
};
